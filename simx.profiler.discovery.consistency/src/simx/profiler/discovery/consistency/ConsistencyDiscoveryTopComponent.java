/*
 * Copyright 2015 Stephan Rehfeld
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package simx.profiler.discovery.consistency;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JTable;
import javax.swing.KeyStroke;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import simx.profiler.discovery.consistency.events.StartConsistencyDiscoveryEvent;
import simx.profiler.model.ActorInstance;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//simx.profiler.discovery.consistency//ConsistencyDiscovery//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "ConsistencyDiscoveryTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "simx.profiler.discovery.consistency.ConsistencyDiscoveryTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ConsistencyDiscoveryAction",
        preferredID = "ConsistencyDiscoveryTopComponent"
)
@Messages({
    "CTL_ConsistencyDiscoveryAction=ConsistencyDiscovery",
    "CTL_ConsistencyDiscoveryTopComponent=ConsistencyDiscovery Window",
    "HINT_ConsistencyDiscoveryTopComponent=This is a ConsistencyDiscovery window"
})
public final class ConsistencyDiscoveryTopComponent extends TopComponent implements LookupListener, ConsistencyCheckProgressListener {

    private Lookup.Result< StartConsistencyDiscoveryEvent > result = null;
    private final List< ConsistencyCheckData > data;
    
    private final ConsistencyDiscoveryTopComponent self = this;
    private Thread t;
    
    public ConsistencyDiscoveryTopComponent() {
        initComponents();
        setName(Bundle.CTL_ConsistencyDiscoveryTopComponent());
        setToolTipText(Bundle.HINT_ConsistencyDiscoveryTopComponent());
        this.data = new ArrayList<>();
        
        final InputMap im = this.consistencyCheckTable.getInputMap( JTable.WHEN_FOCUSED );
        final ActionMap am = this.consistencyCheckTable.getActionMap();
        im.put( KeyStroke.getKeyStroke( KeyEvent.VK_DELETE, 0 ), "DeleteRow" );
        am.put( "DeleteRow", new AbstractAction() {

            @Override
            public void actionPerformed( final ActionEvent e ) {
                final int row = consistencyCheckTable.getSelectedRow();
                if( consistencyCheckTable.getModel() instanceof ConsistencyDiscoveryTableModel && row != -1 ) {
                    final ConsistencyDiscoveryTableModel model = (ConsistencyDiscoveryTableModel)consistencyCheckTable.getModel();
                    model.data.remove( row );
                    consistencyCheckTable.revalidate();
                }
            }
            
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        discoverConsistencyButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        loopsProgressBar = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        consistencyCheckTable = new javax.swing.JTable();
        actorsProgressBar = new javax.swing.JProgressBar();

        org.openide.awt.Mnemonics.setLocalizedText(discoverConsistencyButton, org.openide.util.NbBundle.getMessage(ConsistencyDiscoveryTopComponent.class, "ConsistencyDiscoveryTopComponent.discoverConsistencyButton.text")); // NOI18N
        discoverConsistencyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discoverConsistencyButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(cancelButton, org.openide.util.NbBundle.getMessage(ConsistencyDiscoveryTopComponent.class, "ConsistencyDiscoveryTopComponent.cancelButton.text")); // NOI18N
        cancelButton.setEnabled(false);
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        consistencyCheckTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "From", "Simulation Loop Mesage", "Transfer", "To", "Simulation Loop Message", "Consistent Input Data"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(consistencyCheckTable);
        if (consistencyCheckTable.getColumnModel().getColumnCount() > 0) {
            consistencyCheckTable.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(ConsistencyDiscoveryTopComponent.class, "ConsistencyDiscoveryTopComponent.consistencyCheckTable.columnModel.title0")); // NOI18N
            consistencyCheckTable.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(ConsistencyDiscoveryTopComponent.class, "ConsistencyDiscoveryTopComponent.consistencyCheckTable.columnModel.title1")); // NOI18N
            consistencyCheckTable.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(ConsistencyDiscoveryTopComponent.class, "ConsistencyDiscoveryTopComponent.consistencyCheckTable.columnModel.title2")); // NOI18N
            consistencyCheckTable.getColumnModel().getColumn(3).setHeaderValue(org.openide.util.NbBundle.getMessage(ConsistencyDiscoveryTopComponent.class, "ConsistencyDiscoveryTopComponent.consistencyCheckTable.columnModel.title3")); // NOI18N
            consistencyCheckTable.getColumnModel().getColumn(4).setHeaderValue(org.openide.util.NbBundle.getMessage(ConsistencyDiscoveryTopComponent.class, "ConsistencyDiscoveryTopComponent.consistencyCheckTable.columnModel.title4")); // NOI18N
            consistencyCheckTable.getColumnModel().getColumn(5).setHeaderValue(org.openide.util.NbBundle.getMessage(ConsistencyDiscoveryTopComponent.class, "ConsistencyDiscoveryTopComponent.consistencyCheckTable.columnModel.title5")); // NOI18N
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(discoverConsistencyButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(actorsProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(loopsProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 604, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(actorsProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loopsProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(discoverConsistencyButton)
                        .addComponent(cancelButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void discoverConsistencyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discoverConsistencyButtonActionPerformed
        this.discoverConsistencyButton.setEnabled( false );
        this.cancelButton.setEnabled( true );
        
        final Runnable runnable = () -> {
            actorsProgressBar.setValue( 0 );
            loopsProgressBar.setValue( 0 );
            ConsistencyChecker.checkConsistency( data, self );
            
            consistencyCheckTable.revalidate();
            consistencyCheckTable.updateUI();
            
            discoverConsistencyButton.setEnabled( true );
            cancelButton.setEnabled( false );
        };
        this.t = new Thread( runnable );
        this.t.start();
        
    }//GEN-LAST:event_discoverConsistencyButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        t.interrupt();
        this.cancelButton.setEnabled( false );
    }//GEN-LAST:event_cancelButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar actorsProgressBar;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTable consistencyCheckTable;
    private javax.swing.JButton discoverConsistencyButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JProgressBar loopsProgressBar;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        this.result = Utilities.actionsGlobalContext().lookupResult( StartConsistencyDiscoveryEvent.class );
        this.result.addLookupListener( this );
        this.result.allInstances();
    }

    @Override
    public void componentClosed() {
        this.result.removeLookupListener( this );
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    @Override
    public void resultChanged( final LookupEvent le ) {
        Collection<? extends StartConsistencyDiscoveryEvent> allSelectedTypes = result.allInstances();
        if( !allSelectedTypes.isEmpty() ) {
            for( final StartConsistencyDiscoveryEvent event : allSelectedTypes ) this.setData( event );
        } else {
            System.out.println( "No selection" );
        }
    }

    private void setData( final StartConsistencyDiscoveryEvent event ) {
        data.clear();
        event.consistencyDiscoveryInstances.stream().forEach((from) -> {
            event.consistencyDiscoveryInstances.stream().filter((to) -> !( from.equals( to ) )).filter((to) -> ( from.getReceiverStatistics().containsKey( to ) )).forEach((to) -> {
                data.add( new ConsistencyCheckData( from, to ) );
            });
        });
        
        this.consistencyCheckTable.setModel( new ConsistencyDiscoveryTableModel( data ) );
        
        final MessageComboBoxCellEditor cellEditor = new MessageComboBoxCellEditor( data );
        this.consistencyCheckTable.getColumnModel().getColumn( 1 ).setCellEditor( cellEditor );
        this.consistencyCheckTable.getColumnModel().getColumn( 2 ).setCellEditor( cellEditor );
        this.consistencyCheckTable.getColumnModel().getColumn( 4 ).setCellEditor( cellEditor );
        
        
        
    }

    @Override
    public void actorsCheckedProgressed( final int progress ) {
        this.actorsProgressBar.setValue( progress );
    }

    @Override
    public void communicationOfActorCheckedProgrss( final int progress ) {
        this.loopsProgressBar.setValue( progress );
    }
}
