/*
 * Copyright 2015 Stephan Rehfeld
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package simx.profiler.discovery.latency;

import java.util.Collection;
import java.util.Collections;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.windows.WindowManager;
import simx.profiler.discovery.latency.events.StartLatencyDiscoveryEvent;
import simx.profiler.model.ActorInstance;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//simx.profiler.discovery.latency//LatencyDiscovery//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "LatencyDiscoveryTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "bottomSlidingSide", openAtStartup = false)
@ActionID(category = "Window", id = "simx.profiler.discovery.latency.LatencyDiscoveryTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_LatencyDiscoveryAction",
        preferredID = "LatencyDiscoveryTopComponent"
)
@Messages({
    "CTL_LatencyDiscoveryAction=LatencyDiscovery",
    "CTL_LatencyDiscoveryTopComponent=LatencyDiscovery Window",
    "HINT_LatencyDiscoveryTopComponent=This is a LatencyDiscovery window"
})
public final class LatencyDiscoveryTopComponent extends TopComponent implements LookupListener, LatencyDiscoveryProgressListener {

    private Lookup.Result< StartLatencyDiscoveryEvent > result = null;
    private ActorInstance startActorInstance = null;
    
    private final InstanceContent content;
    
    private final LatencyDiscoveryGraphScene latencyDiscoveryGraphScene;
    
    private final LatencyDiscoveryTopComponent self = this;
    
    public LatencyDiscoveryTopComponent() {
        initComponents();
        setName(Bundle.CTL_LatencyDiscoveryTopComponent());
        setToolTipText(Bundle.HINT_LatencyDiscoveryTopComponent());

        this.content = new InstanceContent();
        this.associateLookup( new AbstractLookup( this.content ) );
        
        this.latencyDiscoveryGraphScene = new LatencyDiscoveryGraphScene(); 
        this.latencyDiscoveryScrollPane.setViewportView( this.latencyDiscoveryGraphScene.createView() );
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        latencyDiscoveryScrollPane = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        discoverLatencyButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        latencyDiscoveryProgressBar = new javax.swing.JProgressBar();

        org.openide.awt.Mnemonics.setLocalizedText(discoverLatencyButton, org.openide.util.NbBundle.getMessage(LatencyDiscoveryTopComponent.class, "LatencyDiscoveryTopComponent.discoverLatencyButton.text")); // NOI18N
        discoverLatencyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discoverLatencyButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(cancelButton, org.openide.util.NbBundle.getMessage(LatencyDiscoveryTopComponent.class, "LatencyDiscoveryTopComponent.cancelButton.text")); // NOI18N
        cancelButton.setEnabled(false);
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(discoverLatencyButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(latencyDiscoveryProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 444, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 9, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(discoverLatencyButton)
                        .addComponent(cancelButton))
                    .addComponent(latencyDiscoveryProgressBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(latencyDiscoveryScrollPane)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(latencyDiscoveryScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private Thread t;
    
    private void discoverLatencyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discoverLatencyButtonActionPerformed
        this.discoverLatencyButton.setEnabled( false );
        this.cancelButton.setEnabled( true );
        final TopComponent latencyReportWindow = WindowManager.getDefault().findTopComponent( "LatencyReportTopComponent" );
        latencyReportWindow.open();  
        this.latencyDiscoveryProgressBar.setValue( 0 );
        final Runnable runnable = () -> {
            final LatencyReport latencyReport = LatencyCalculator.calculateLatency( latencyDiscoveryGraphScene.getOrderedNodes(), latencyDiscoveryGraphScene.getOrderedEdges(), self );
            if( latencyReport != null ) {
                
                content.set( Collections.singleton( latencyReport ), null );
            }
            discoverLatencyButton.setEnabled( true );
            cancelButton.setEnabled( false );         
        };
        
        t = new Thread( runnable );
        t.start();
    }//GEN-LAST:event_discoverLatencyButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        t.interrupt();
        this.cancelButton.setEnabled( false );
    }//GEN-LAST:event_cancelButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton discoverLatencyButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar latencyDiscoveryProgressBar;
    private javax.swing.JScrollPane latencyDiscoveryScrollPane;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        this.result = Utilities.actionsGlobalContext().lookupResult( StartLatencyDiscoveryEvent.class );
        this.result.addLookupListener( this );
        this.result.allInstances();
    }

    @Override
    public void componentClosed() {
        this.result.removeLookupListener( this );
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    @Override
    public void resultChanged(LookupEvent le) {
        Collection<? extends StartLatencyDiscoveryEvent> allSelectedTypes = result.allInstances();
        if( !allSelectedTypes.isEmpty() ) {
            allSelectedTypes.stream().forEach((event) -> {
                this.setData( event.actorInstance );
            });
        } else {
            System.out.println( "No selection" );
        }
    }

    private void setData( final ActorInstance type ) {
        if( type != this.startActorInstance ) {
            this.startActorInstance = type;
            this.latencyDiscoveryGraphScene.removeChildren();
            this.latencyDiscoveryGraphScene.readdLayer();
            this.latencyDiscoveryGraphScene.validate();
            this.latencyDiscoveryGraphScene.addNode( new LatencyDiscoveryNode( this.startActorInstance ) );
            this.latencyDiscoveryGraphScene.validate();
            this.latencyDiscoveryGraphScene.repaint();
        }
    }

    @Override
    public void latencyDiscoveryProgress( final int progress ) {
        this.latencyDiscoveryProgressBar.setValue( progress );
    }
}
